Skip to content
Search or jump toâ€¦
Pull requests
Issues
Marketplace
Explore
 
@12451-dev 
Prashad96
/
GRIP_Data_Science
Public
Code
Issues
Pull requests
Actions
Projects
Wiki
Security
Insights
Created using Colaboratory
 main
@Prashad96
Prashad96 committed 12 hours ago 
1 parent de2b025 commit 5e6cfaeaf8a8aaebf783d7b35d587869b0a7cf09
Showing 1 changed file with 3,235 additions and 1 deletion.
 3,236  
Exploratory Data Analysis - Using IPL dataset/GRIP_task_1_Sports_EDA.ipynb
@@ -1 +1,3235 @@

{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Prashad96/GRIP_Data_Science/blob/main/Exploratory%20Data%20Analysis%20-%20Using%20IPL%20dataset/GRIP_task_1_Sports_EDA.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "eb2cbf54",
      "metadata": {
        "id": "eb2cbf54"
      },
      "source": [
        "# THE SPARKS FOUNDATION - GRIP - Data Science and Business Analytics - JUNE 2022"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "af2b7dcb",
      "metadata": {
        "id": "af2b7dcb"
      },
      "source": [
        "# Name : **PRASHAD S P**\n",
        "# Task 1 : **Exploratory Data Analysis - Sports**\n",
        "<hr style=\"border:2px solid gray\">"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "62673381",
      "metadata": {
        "id": "62673381"
      },
      "source": [
        "### Aim:\n",
        "  > ## To perform 'Exploratory Data Analysis\" on the dataset \"Indian Premier League\"\n",
        "<hr style=\"border:2px solid gray\">"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a32f93f5",
      "metadata": {
        "id": "a32f93f5"
      },
      "source": [
        "## Objective\n",
        "\n",
        " >### To find out the Most Successful teams, Players and factors that are contribute to team's victory or defeat \n",
        " \n",
        "***"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a3e33482",
      "metadata": {
        "id": "a3e33482"
      },
      "source": [
        "## Importing the required libraries"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3485fd13",
      "metadata": {
        "id": "3485fd13"
      },
      "outputs": [],
      "source": [
        "import pandas as pd # For Data Analysis\n",
        "import matplotlib.pyplot as plt # for Data  Visualization\n",
        "import seaborn as sns # for Data visualization"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "08d96670",
      "metadata": {
        "id": "08d96670"
      },
      "source": [
        "## Loading the Dataset"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "60da15a0",
      "metadata": {
        "id": "60da15a0"
      },
      "source": [
        "## About Dataset\n",
        "   >### Both the matches.csv and deliveries.csv datasets only have data between 2008 and 2019. So this data analysis may not applicable to 2022.\n",
        "\n",
        "  ## Dataset URl : [Indian Premier League.zip](https://drive.google.com/file/d/18iDDIIZGt8eWxzqbyMIqcn5X7bHINuLw/view?usp=sharing)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d7c224cd",
      "metadata": {
        "id": "d7c224cd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e86d92d7-3052-4e30-ebd3-8c6becf96389"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading...\n",
            "From: https://drive.google.com/uc?id=18iDDIIZGt8eWxzqbyMIqcn5X7bHINuLw\n",
            "To: /content/Indian Premier League.zip\n",
            "\r  0% 0.00/1.26M [00:00<?, ?B/s]\r100% 1.26M/1.26M [00:00<00:00, 28.3MB/s]\n",
            "Archive:  Indian Premier League.zip\n",
            "  inflating: deliveries.csv          \n",
            "  inflating: matches.csv             \n"
          ]
        }
      ],
      "source": [
        "! gdown 18iDDIIZGt8eWxzqbyMIqcn5X7bHINuLw # To load dataset from google drive to execute in  Google Colab\n",
        "!unzip \"Indian Premier League.zip\" # unzip it \n",
        "match_ds = pd.read_csv(\"matches.csv\")\n",
        "delivery_ds = pd.read_csv(\"deliveries.csv\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f7516367",
      "metadata": {
        "id": "f7516367"
      },
      "source": [
        "## Visualizing the Dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1d7c384e",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1d7c384e",
        "outputId": "5e4c09f5-4346-4729-a84e-3c1da8def7cf"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(756, 18)"
            ]
          },
          "execution_count": 4,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "match_ds.shape # shape of match_ds \n",
        "#rows = 756, column=18"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "351260e4",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "351260e4",
        "outputId": "03ad585a-3cb9-4a48-e8a8-5b2ec8129111"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 756 entries, 0 to 755\n",
            "Data columns (total 18 columns):\n",
            " #   Column           Non-Null Count  Dtype \n",
            "---  ------           --------------  ----- \n",
            " 0   id               756 non-null    int64 \n",
            " 1   season           756 non-null    int64 \n",
            " 2   city             749 non-null    object\n",
            " 3   date             756 non-null    object\n",
            " 4   team1            756 non-null    object\n",
            " 5   team2            756 non-null    object\n",
            " 6   toss_winner      756 non-null    object\n",
            " 7   toss_decision    756 non-null    object\n",
            " 8   result           756 non-null    object\n",
            " 9   dl_applied       756 non-null    int64 \n",
            " 10  winner           752 non-null    object\n",
            " 11  win_by_runs      756 non-null    int64 \n",
            " 12  win_by_wickets   756 non-null    int64 \n",
            " 13  player_of_match  752 non-null    object\n",
            " 14  venue            756 non-null    object\n",
            " 15  umpire1          754 non-null    object\n",
            " 16  umpire2          754 non-null    object\n",
            " 17  umpire3          119 non-null    object\n",
            "dtypes: int64(5), object(13)\n",
            "memory usage: 106.4+ KB\n"
          ]
        }
      ],
      "source": [
        "match_ds.info()# gives information about columns and it's datatype"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d14a20e7",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d14a20e7",
        "outputId": "f3e01ee1-ed7b-40fe-e578-df9bbbf0e8a5"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "id                                    11\n",
              "season                              2017\n",
              "city                             Kolkata\n",
              "date                          2017-04-13\n",
              "team1                    Kings XI Punjab\n",
              "team2              Kolkata Knight Riders\n",
              "toss_winner        Kolkata Knight Riders\n",
              "toss_decision                      field\n",
              "result                            normal\n",
              "dl_applied                             0\n",
              "winner             Kolkata Knight Riders\n",
              "win_by_runs                            0\n",
              "win_by_wickets                         8\n",
              "player_of_match                SP Narine\n",
              "venue                       Eden Gardens\n",
              "umpire1                       A Deshmukh\n",
              "umpire2                         NJ Llong\n",
              "umpire3                              NaN\n",
              "Name: 10, dtype: object"
            ]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "match_ds.iloc[10] # getting row data by index"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "880b5fac",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 468
        },
        "id": "880b5fac",
        "outputId": "51e2766a-c5d3-465c-b721-c2f43e86f0cd"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>season</th>\n",
              "      <th>city</th>\n",
              "      <th>date</th>\n",
              "      <th>team1</th>\n",
              "      <th>team2</th>\n",
              "      <th>toss_winner</th>\n",
              "      <th>toss_decision</th>\n",
              "      <th>result</th>\n",
              "      <th>dl_applied</th>\n",
              "      <th>winner</th>\n",
              "      <th>win_by_runs</th>\n",
              "      <th>win_by_wickets</th>\n",
              "      <th>player_of_match</th>\n",
              "      <th>venue</th>\n",
              "      <th>umpire1</th>\n",
              "      <th>umpire2</th>\n",
              "      <th>umpire3</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>751</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>752</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>753</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>754</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>755</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>756 rows Ã— 18 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "        id  season   city   date  team1  team2  toss_winner  toss_decision  \\\n",
              "0    False   False  False  False  False  False        False          False   \n",
              "1    False   False  False  False  False  False        False          False   \n",
              "2    False   False  False  False  False  False        False          False   \n",
              "3    False   False  False  False  False  False        False          False   \n",
              "4    False   False  False  False  False  False        False          False   \n",
              "..     ...     ...    ...    ...    ...    ...          ...            ...   \n",
              "751  False   False  False  False  False  False        False          False   \n",
              "752  False   False  False  False  False  False        False          False   \n",
              "753  False   False  False  False  False  False        False          False   \n",
              "754  False   False  False  False  False  False        False          False   \n",
              "755  False   False  False  False  False  False        False          False   \n",
              "\n",
              "     result  dl_applied  winner  win_by_runs  win_by_wickets  player_of_match  \\\n",
              "0     False       False   False        False           False            False   \n",
              "1     False       False   False        False           False            False   \n",
              "2     False       False   False        False           False            False   \n",
              "3     False       False   False        False           False            False   \n",
              "4     False       False   False        False           False            False   \n",
              "..      ...         ...     ...          ...             ...              ...   \n",
              "751   False       False   False        False           False            False   \n",
              "752   False       False   False        False           False            False   \n",
              "753   False       False   False        False           False            False   \n",
              "754   False       False   False        False           False            False   \n",
              "755   False       False   False        False           False            False   \n",
              "\n",
              "     venue  umpire1  umpire2  umpire3  \n",
              "0    False    False    False     True  \n",
              "1    False    False    False     True  \n",
              "2    False    False    False     True  \n",
              "3    False    False    False     True  \n",
              "4    False     True     True     True  \n",
              "..     ...      ...      ...      ...  \n",
              "751  False    False    False    False  \n",
              "752  False    False    False    False  \n",
              "753  False     True     True     True  \n",
              "754  False    False    False    False  \n",
              "755  False    False    False    False  \n",
              "\n",
              "[756 rows x 18 columns]"
            ]
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "match_ds.isnull() #checking for empty values\n",
        "# ignore the last column "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ccfebfe5",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ccfebfe5",
        "outputId": "b9e0762a-8e1e-47e1-a804-de4fa4179521"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([2017, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2018,\n",
              "       2019], dtype=int64)"
            ]
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "match_ds[\"season\"].unique() # Returns unique values in particular column"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e503e76f",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e503e76f",
        "outputId": "f51a6963-2204-4df6-e015-771d2ca8dfc9"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array(['Sunrisers Hyderabad', 'Mumbai Indians', 'Gujarat Lions',\n",
              "       'Rising Pune Supergiant', 'Royal Challengers Bangalore',\n",
              "       'Kolkata Knight Riders', 'Delhi Daredevils', 'Kings XI Punjab',\n",
              "       'Chennai Super Kings', 'Rajasthan Royals', 'Deccan Chargers',\n",
              "       'Kochi Tuskers Kerala', 'Pune Warriors', 'Rising Pune Supergiants',\n",
              "       'Delhi Capitals'], dtype=object)"
            ]
          },
          "execution_count": 9,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "match_ds[\"team1\"].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e4bb68aa",
      "metadata": {
        "id": "e4bb68aa"
      },
      "outputs": [],
      "source": [
        "# 'Rising Pune Supergiant' and 'Rising Pune Supergiants' are same team with small splelling corrrection,\n",
        "#'Delhi Daredevils' was rename as 'Delhi Capitals' in 2018\n",
        "# Replace these two instances with one single value in all four columns\n",
        "match_ds.team1.replace({'Rising Pune Supergiants' : 'Rising Pune Supergiant', 'Delhi Daredevils':'Delhi Capitals'},inplace=True)\n",
        "match_ds.toss_winner.replace({'Rising Pune Supergiants' : 'Rising Pune Supergiant', 'Delhi Daredevils':'Delhi Capitals'},inplace=True)\n",
        "match_ds.team2.replace({'Rising Pune Supergiants' : 'Rising Pune Supergiant', 'Delhi Daredevils':'Delhi Capitals'},inplace=True)\n",
        "match_ds.winner.replace({'Rising Pune Supergiants' : 'Rising Pune Supergiant', 'Delhi Daredevils':'Delhi Capitals'},inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a4de739b",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a4de739b",
        "outputId": "14b06c55-dde0-411d-c527-d400486d8aab"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array(['Sunrisers Hyderabad', 'Mumbai Indians', 'Gujarat Lions',\n",
              "       'Rising Pune Supergiant', 'Royal Challengers Bangalore',\n",
              "       'Kolkata Knight Riders', 'Delhi Capitals', 'Kings XI Punjab',\n",
              "       'Chennai Super Kings', 'Rajasthan Royals', 'Deccan Chargers',\n",
              "       'Kochi Tuskers Kerala', 'Pune Warriors'], dtype=object)"
            ]
          },
          "execution_count": 11,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "match_ds.team1.unique() #rename happened"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "78ba99db",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "78ba99db",
        "outputId": "0b472910-32c2-4502-8f7b-483dba99951b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(179078, 21)"
            ]
          },
          "execution_count": 12,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "delivery_ds.shape # shape of delivery dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8bf68009",
      "metadata": {
        "id": "8bf68009",
        "outputId": "d368e37d-a313-45aa-b972-53a93f77cca1"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 179078 entries, 0 to 179077\n",
            "Data columns (total 21 columns):\n",
            " #   Column            Non-Null Count   Dtype \n",
            "---  ------            --------------   ----- \n",
            " 0   match_id          179078 non-null  int64 \n",
            " 1   inning            179078 non-null  int64 \n",
            " 2   batting_team      179078 non-null  object\n",
            " 3   bowling_team      179078 non-null  object\n",
            " 4   over              179078 non-null  int64 \n",
            " 5   ball              179078 non-null  int64 \n",
            " 6   batsman           179078 non-null  object\n",
            " 7   non_striker       179078 non-null  object\n",
            " 8   bowler            179078 non-null  object\n",
            " 9   is_super_over     179078 non-null  int64 \n",
            " 10  wide_runs         179078 non-null  int64 \n",
            " 11  bye_runs          179078 non-null  int64 \n",
            " 12  legbye_runs       179078 non-null  int64 \n",
            " 13  noball_runs       179078 non-null  int64 \n",
            " 14  penalty_runs      179078 non-null  int64 \n",
            " 15  batsman_runs      179078 non-null  int64 \n",
            " 16  extra_runs        179078 non-null  int64 \n",
            " 17  total_runs        179078 non-null  int64 \n",
            " 18  player_dismissed  8834 non-null    object\n",
            " 19  dismissal_kind    8834 non-null    object\n",
            " 20  fielder           6448 non-null    object\n",
            "dtypes: int64(13), object(8)\n",
            "memory usage: 28.7+ MB\n"
          ]
        }
      ],
      "source": [
        "delivery_ds.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "84af7842",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "84af7842",
        "outputId": "27dbfe96-3277-4696-aaf6-71e3a0f3b68b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "match_id                                      1\n",
              "inning                                        1\n",
              "batting_team                Sunrisers Hyderabad\n",
              "bowling_team        Royal Challengers Bangalore\n",
              "over                                         20\n",
              "ball                                          2\n",
              "batsman                                DJ Hooda\n",
              "non_striker                         BCJ Cutting\n",
              "bowler                                SR Watson\n",
              "is_super_over                                 0\n",
              "wide_runs                                     0\n",
              "bye_runs                                      0\n",
              "legbye_runs                                   0\n",
              "noball_runs                                   0\n",
              "penalty_runs                                  0\n",
              "batsman_runs                                  1\n",
              "extra_runs                                    0\n",
              "total_runs                                    1\n",
              "player_dismissed                            NaN\n",
              "dismissal_kind                              NaN\n",
              "fielder                                     NaN\n",
              "Name: 120, dtype: object"
            ]
          },
          "execution_count": 13,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "delivery_ds.iloc[120]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4d38e1d7",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 473
        },
        "id": "4d38e1d7",
        "outputId": "ef982c0a-6198-46b8-8b47-0db240c9d0c8"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>match_id</th>\n",
              "      <th>inning</th>\n",
              "      <th>batting_team</th>\n",
              "      <th>bowling_team</th>\n",
              "      <th>over</th>\n",
              "      <th>ball</th>\n",
              "      <th>batsman</th>\n",
              "      <th>non_striker</th>\n",
              "      <th>bowler</th>\n",
              "      <th>is_super_over</th>\n",
              "      <th>...</th>\n",
              "      <th>bye_runs</th>\n",
              "      <th>legbye_runs</th>\n",
              "      <th>noball_runs</th>\n",
              "      <th>penalty_runs</th>\n",
              "      <th>batsman_runs</th>\n",
              "      <th>extra_runs</th>\n",
              "      <th>total_runs</th>\n",
              "      <th>player_dismissed</th>\n",
              "      <th>dismissal_kind</th>\n",
              "      <th>fielder</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>DA Warner</td>\n",
              "      <td>S Dhawan</td>\n",
              "      <td>TS Mills</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>DA Warner</td>\n",
              "      <td>S Dhawan</td>\n",
              "      <td>TS Mills</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>DA Warner</td>\n",
              "      <td>S Dhawan</td>\n",
              "      <td>TS Mills</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>DA Warner</td>\n",
              "      <td>S Dhawan</td>\n",
              "      <td>TS Mills</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>DA Warner</td>\n",
              "      <td>S Dhawan</td>\n",
              "      <td>TS Mills</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows Ã— 21 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "   match_id  inning         batting_team                 bowling_team  over  \\\n",
              "0         1       1  Sunrisers Hyderabad  Royal Challengers Bangalore     1   \n",
              "1         1       1  Sunrisers Hyderabad  Royal Challengers Bangalore     1   \n",
              "2         1       1  Sunrisers Hyderabad  Royal Challengers Bangalore     1   \n",
              "3         1       1  Sunrisers Hyderabad  Royal Challengers Bangalore     1   \n",
              "4         1       1  Sunrisers Hyderabad  Royal Challengers Bangalore     1   \n",
              "\n",
              "   ball    batsman non_striker    bowler  is_super_over  ...  bye_runs  \\\n",
              "0     1  DA Warner    S Dhawan  TS Mills              0  ...         0   \n",
              "1     2  DA Warner    S Dhawan  TS Mills              0  ...         0   \n",
              "2     3  DA Warner    S Dhawan  TS Mills              0  ...         0   \n",
              "3     4  DA Warner    S Dhawan  TS Mills              0  ...         0   \n",
              "4     5  DA Warner    S Dhawan  TS Mills              0  ...         0   \n",
              "\n",
              "   legbye_runs  noball_runs  penalty_runs  batsman_runs  extra_runs  \\\n",
              "0            0            0             0             0           0   \n",
              "1            0            0             0             0           0   \n",
              "2            0            0             0             4           0   \n",
              "3            0            0             0             0           0   \n",
              "4            0            0             0             0           2   \n",
              "\n",
              "   total_runs  player_dismissed dismissal_kind fielder  \n",
              "0           0               NaN            NaN     NaN  \n",
              "1           0               NaN            NaN     NaN  \n",
              "2           4               NaN            NaN     NaN  \n",
              "3           0               NaN            NaN     NaN  \n",
              "4           2               NaN            NaN     NaN  \n",
              "\n",
              "[5 rows x 21 columns]"
            ]
          },
          "execution_count": 16,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "delivery_ds.head() #display the first 5 rows"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "72f87e02",
      "metadata": {
        "id": "72f87e02"
      },
      "source": [
        "## Analyzing the Data"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "dace6198",
      "metadata": {
        "id": "dace6198"
      },
      "source": [
        "## Total number of matches played in each season"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b2cc75b8",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 538
        },
        "id": "b2cc75b8",
        "outputId": "5912234b-1e0a-4aca-c617-5e541208ba4b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<AxesSubplot:title={'center':'Total number of matches played in each season'}, xlabel='season', ylabel='count'>"
            ]
          },
          "execution_count": 17,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure(figsize=(15,8))\n",
        "plt.title(\"Total number of matches played in each season\")\n",
        "plt.xlabel('Season',fontsize=15)\n",
        "plt.ylabel('Count',fontsize=15)\n",
        "plt.xticks(fontsize=12)\n",
        "plt.yticks(fontsize=12)\n",
        "sns.countplot(x=match_ds['season'])# ploting Total number of matches played in each season"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a6552e96",
      "metadata": {
        "id": "a6552e96"
      },
      "source": [
        "## Most Successfull Team in IPL(2008 - 2019)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f5109e7f",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 457
        },
        "id": "f5109e7f",
        "outputId": "572fc182-7354-4761-e699-03f5977ac4a8",
        "scrolled": false
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Team</th>\n",
              "      <th>No.of matches Won</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Mumbai Indians</td>\n",
              "      <td>109</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>92</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>84</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Kings XI Punjab</td>\n",
              "      <td>82</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Delhi Capitals</td>\n",
              "      <td>77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>58</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Deccan Chargers</td>\n",
              "      <td>29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Rising Pune Supergiant</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Gujarat Lions</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Pune Warriors</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Kochi Tuskers Kerala</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                           Team  No.of matches Won\n",
              "0                Mumbai Indians                109\n",
              "1           Chennai Super Kings                100\n",
              "2         Kolkata Knight Riders                 92\n",
              "3   Royal Challengers Bangalore                 84\n",
              "4               Kings XI Punjab                 82\n",
              "5                Delhi Capitals                 77\n",
              "6              Rajasthan Royals                 75\n",
              "7           Sunrisers Hyderabad                 58\n",
              "8               Deccan Chargers                 29\n",
              "9        Rising Pune Supergiant                 15\n",
              "10                Gujarat Lions                 13\n",
              "11                Pune Warriors                 12\n",
              "12         Kochi Tuskers Kerala                  6"
            ]
          },
          "execution_count": 18,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "matches_won = match_ds.groupby(\"winner\")[[\"id\"]].count() #grouping each team with no. of winning matches\n",
        "matches_won = matches_won.sort_values(by=[\"id\"],ascending=False).reset_index() # arrange in descending order\n",
        "matches_won.rename(columns = {'id':'No.of matches Won','winner':'Team'},inplace=True) #renameing the columns\n",
        "matches_won # displaying ipl teams with No. of matches won"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "75fd387d",
      "metadata": {
        "id": "75fd387d"
      },
      "source": [
        " >## MUMBAI INDIANS won the most matches in the IPL, followed by CHENNAI SUPER KINGS and KOLKATA KNIGHT RIDERS."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1ba4f6f0",
      "metadata": {
        "id": "1ba4f6f0"
      },
      "source": [
        "### Calculating the Winning Rate"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9095e7b4",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 590
        },
        "id": "9095e7b4",
        "outputId": "f659e8a5-f913-4c11-cb2b-b8c9daa04f1f"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<BarContainer object of 13 artists>"
            ]
          },
          "execution_count": 19,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure(figsize=(12,6))\n",
        "plt.title(\"Total Number of Played Matches\")\n",
        "plt.xlabel(\"Team\",fontsize=15)\n",
        "plt.ylabel(\"Number of Matches\",fontsize=15)\n",
        "a = match_ds.groupby([\"team1\"])['team2'].count() #getting no. of match played by each team as team1\n",
        "b = match_ds.groupby(['team2'])['team1'].count() #getting no. of match played by each team as team2\n",
        "matches_played = pd.DataFrame(a+b) # adding both dataframe to get toal no. of matches played by each team as both team1 and team2\n",
        "matches_played[\"Team\"] = matches_played.index #assinging team names in new column \"Team\"\n",
        "matches_played.rename(columns={0:'No. of Matches played'},inplace=True)\n",
        "plt.xticks(rotation = 90,fontsize=12) #displaying the xticks value in vertical algin\n",
        "plt.yticks(fontsize=10)\n",
        "matches_played = matches_played.sort_values('No. of Matches played',ascending=False)\n",
        "plt.bar(matches_played['Team'],matches_played['No. of Matches played'],alpha = 0.8,color='r')  # alpha -> transperancy levels of bar"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2f67afa6",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 457
        },
        "id": "2f67afa6",
        "outputId": "747c8f6b-b453-4ac8-970c-99bdfe2d222e",
        "scrolled": false
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>No. of Matches played</th>\n",
              "      <th>Team</th>\n",
              "      <th>No.of matches Won</th>\n",
              "      <th>Win_Rate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>164</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>100</td>\n",
              "      <td>60.975610</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>187</td>\n",
              "      <td>Mumbai Indians</td>\n",
              "      <td>109</td>\n",
              "      <td>58.288770</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>108</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>58</td>\n",
              "      <td>53.703704</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>178</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>92</td>\n",
              "      <td>51.685393</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>147</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>75</td>\n",
              "      <td>51.020408</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>30</td>\n",
              "      <td>Rising Pune Supergiant</td>\n",
              "      <td>15</td>\n",
              "      <td>50.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>180</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>84</td>\n",
              "      <td>46.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>176</td>\n",
              "      <td>Kings XI Punjab</td>\n",
              "      <td>82</td>\n",
              "      <td>46.590909</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>177</td>\n",
              "      <td>Delhi Capitals</td>\n",
              "      <td>77</td>\n",
              "      <td>43.502825</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>30</td>\n",
              "      <td>Gujarat Lions</td>\n",
              "      <td>13</td>\n",
              "      <td>43.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>14</td>\n",
              "      <td>Kochi Tuskers Kerala</td>\n",
              "      <td>6</td>\n",
              "      <td>42.857143</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>75</td>\n",
              "      <td>Deccan Chargers</td>\n",
              "      <td>29</td>\n",
              "      <td>38.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>46</td>\n",
              "      <td>Pune Warriors</td>\n",
              "      <td>12</td>\n",
              "      <td>26.086957</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    No. of Matches played                         Team  No.of matches Won  \\\n",
              "5                     164          Chennai Super Kings                100   \n",
              "0                     187               Mumbai Indians                109   \n",
              "7                     108          Sunrisers Hyderabad                 58   \n",
              "2                     178        Kolkata Knight Riders                 92   \n",
              "6                     147             Rajasthan Royals                 75   \n",
              "11                     30       Rising Pune Supergiant                 15   \n",
              "1                     180  Royal Challengers Bangalore                 84   \n",
              "4                     176              Kings XI Punjab                 82   \n",
              "3                     177               Delhi Capitals                 77   \n",
              "10                     30                Gujarat Lions                 13   \n",
              "12                     14         Kochi Tuskers Kerala                  6   \n",
              "8                      75              Deccan Chargers                 29   \n",
              "9                      46                Pune Warriors                 12   \n",
              "\n",
              "     Win_Rate  \n",
              "5   60.975610  \n",
              "0   58.288770  \n",
              "7   53.703704  \n",
              "2   51.685393  \n",
              "6   51.020408  \n",
              "11  50.000000  \n",
              "1   46.666667  \n",
              "4   46.590909  \n",
              "3   43.502825  \n",
              "10  43.333333  \n",
              "12  42.857143  \n",
              "8   38.666667  \n",
              "9   26.086957  "
            ]
          },
          "execution_count": 20,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "mergerd_df = matches_played.merge(matches_won,on='Team') # merging two dataframe based on \"Team\" -> team name \n",
        "mergerd_df['Win_Rate'] = (mergerd_df['No.of matches Won']/mergerd_df['No. of Matches played'])*100 # calculating winning rate \n",
        "mergerd_df.sort_values(by='Win_Rate',ascending=False)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f92ff841",
      "metadata": {
        "id": "f92ff841"
      },
      "source": [
        "### According to the above table, CHENNAI SUPER KINGS has the highest winning rate, followed by MUMBAI INDIANS."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6c4d8933",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 758
        },
        "id": "6c4d8933",
        "outputId": "ed40cf3e-a95e-44fc-ae12-00acf966abdd"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x1a167ad0250>"
            ]
          },
          "execution_count": 21,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x720 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure(figsize=(15,10))\n",
        "plt.title(\"Total Number of matches won by each team out Total Number of matches played\")\n",
        "plt.xticks(rotation=90,fontsize=10)\n",
        "plt.bar(mergerd_df['Team'],mergerd_df['No.of matches Won'],color='blue',alpha=.8)\n",
        "plt.bar(mergerd_df['Team'],mergerd_df['No. of Matches played'],color='y',alpha=0.3)\n",
        "plt.plot(mergerd_df['Win_Rate'],'r-.*')\n",
        "plt.legend(['Percentage of victory','No.of matches won','No.of matches played'])"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "0c4f1209",
      "metadata": {
        "id": "0c4f1209"
      },
      "source": [
        "## Considering both bar charts, \n",
        "## Chennai Super Kings and  MUMBAI INDIANS are the two most successful teams in IPL history (2008 - 2019)\n",
        "<hr style=\"border:2px solid gray\">"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "bd3ff1df",
      "metadata": {
        "id": "bd3ff1df"
      },
      "source": [
        "## Most Successful Players in IPL(2008 - 2019)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e7162885",
      "metadata": {
        "id": "e7162885"
      },
      "source": [
        "### Analyzing <b>Man of the Match</b> players"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5e33b6a7",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 520
        },
        "id": "5e33b6a7",
        "outputId": "0db8917b-5175-47bb-d3ec-30cc6667d58c",
        "scrolled": false
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Top Players</th>\n",
              "      <th>The number of times a player has been chosen as the man of the match</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>CH Gayle</td>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>AB de Villiers</td>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>MS Dhoni</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>DA Warner</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>RG Sharma</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>YK Pathan</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>SR Watson</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>SK Raina</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>G Gambhir</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>MEK Hussey</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>V Kohli</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>AM Rahane</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>AD Russell</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>DR Smith</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>V Sehwag</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       Top Players  \\\n",
              "0         CH Gayle   \n",
              "1   AB de Villiers   \n",
              "2         MS Dhoni   \n",
              "3        DA Warner   \n",
              "4        RG Sharma   \n",
              "5        YK Pathan   \n",
              "6        SR Watson   \n",
              "7         SK Raina   \n",
              "8        G Gambhir   \n",
              "9       MEK Hussey   \n",
              "10         V Kohli   \n",
              "11       AM Rahane   \n",
              "12      AD Russell   \n",
              "13        DR Smith   \n",
              "14        V Sehwag   \n",
              "\n",
              "    The number of times a player has been chosen as the man of the match  \n",
              "0                                                  21                     \n",
              "1                                                  20                     \n",
              "2                                                  17                     \n",
              "3                                                  17                     \n",
              "4                                                  17                     \n",
              "5                                                  16                     \n",
              "6                                                  15                     \n",
              "7                                                  14                     \n",
              "8                                                  13                     \n",
              "9                                                  12                     \n",
              "10                                                 12                     \n",
              "11                                                 12                     \n",
              "12                                                 11                     \n",
              "13                                                 11                     \n",
              "14                                                 11                     "
            ]
          },
          "execution_count": 22,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "man_of_the_match = match_ds.groupby('player_of_match')[['id']].count() #getting the list of 'man of the match' players\n",
        "man_of_the_match = man_of_the_match.sort_values(by='id',ascending=False).reset_index().head(15)# arranging it in descending order and filter out top 15 players\n",
        "man_of_the_match.rename(columns ={ 'player_of_match':'Top Players','id':'The number of times a player has been chosen as the man of the match'},inplace=True)\n",
        "man_of_the_match"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b3d88284",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 532
        },
        "id": "b3d88284",
        "outputId": "38bee54a-5fb3-41c1-ec78-75633b858c80"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<AxesSubplot:title={'center':'The number of times a player has been chosen as the man of the match'}, xlabel='The number of times a player has been chosen as the man of the match', ylabel='Top Players'>"
            ]
          },
          "execution_count": 23,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure(figsize=(15,8))\n",
        "plt.title('The number of times a player has been chosen as the man of the match',size=15)\n",
        "sns.barplot(y=man_of_the_match['Top Players'],x= man_of_the_match['The number of times a player has been chosen as the man of the match'])"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c9a47a04",
      "metadata": {
        "id": "c9a47a04"
      },
      "source": [
        "### Based on this data, we can conclude that 'CH Gayle,' 'AB de Villiers,' 'MS Dhoni,' 'DA Warner,' 'RG Sharma,' SK Raina, and 'V Kohli' are the most important players in IPL history."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a7d14879",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 520
        },
        "id": "a7d14879",
        "outputId": "bf3108d5-1706-4b64-f63f-b94b43745df0"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>batsman</th>\n",
              "      <th>batsman_runs</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>V Kohli</td>\n",
              "      <td>5434</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>SK Raina</td>\n",
              "      <td>5415</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>RG Sharma</td>\n",
              "      <td>4914</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>DA Warner</td>\n",
              "      <td>4741</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>S Dhawan</td>\n",
              "      <td>4632</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>CH Gayle</td>\n",
              "      <td>4560</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>MS Dhoni</td>\n",
              "      <td>4477</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>RV Uthappa</td>\n",
              "      <td>4446</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>AB de Villiers</td>\n",
              "      <td>4428</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>G Gambhir</td>\n",
              "      <td>4223</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>AM Rahane</td>\n",
              "      <td>3850</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>KD Karthik</td>\n",
              "      <td>3688</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>SR Watson</td>\n",
              "      <td>3614</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>AT Rayudu</td>\n",
              "      <td>3326</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>YK Pathan</td>\n",
              "      <td>3241</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "           batsman  batsman_runs\n",
              "0          V Kohli          5434\n",
              "1         SK Raina          5415\n",
              "2        RG Sharma          4914\n",
              "3        DA Warner          4741\n",
              "4         S Dhawan          4632\n",
              "5         CH Gayle          4560\n",
              "6         MS Dhoni          4477\n",
              "7       RV Uthappa          4446\n",
              "8   AB de Villiers          4428\n",
              "9        G Gambhir          4223\n",
              "10       AM Rahane          3850\n",
              "11      KD Karthik          3688\n",
              "12       SR Watson          3614\n",
              "13       AT Rayudu          3326\n",
              "14       YK Pathan          3241"
            ]
          },
          "execution_count": 24,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "Batsman = delivery_ds.groupby('batsman')[['batsman_runs']].sum() # total no.of rus scored by each player calculated from \"batsman_runs\" column\n",
        "Batsman = Batsman.sort_values(by='batsman_runs',ascending=False).head(15).reset_index() # Arranging in descending order and slicing the top 15 batsman\n",
        "Batsman.rename(columns={'\tbatsman_runs':'Runs_scored'},inplace=True)\n",
        "Batsman"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9bd93bfa",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 662
        },
        "id": "9bd93bfa",
        "outputId": "7ad8f37f-27f8-4078-80b7-46774327c9fa"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<AxesSubplot:title={'center':'Total Runs scored by players'}, xlabel='batsman_runs', ylabel='batsman'>"
            ]
          },
          "execution_count": 25,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 1080x720 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure(figsize=(15,10))\n",
        "plt.xticks(rotation=90,fontsize=12)\n",
        "plt.title('Total Runs scored by players',fontsize=15)\n",
        "sns.barplot(y=Batsman.batsman,x=Batsman.batsman_runs)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9745a0f3",
      "metadata": {
        "id": "9745a0f3"
      },
      "source": [
        "### According to the above chart, V Kohli, SK Raina, RG Sharma, DA Warner, S Dhawan, MS Dhoni, AB de Villiers, RV Uthappa, and CH Gayle have the most Run Scorers in IPL history."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3f0e3175",
      "metadata": {
        "id": "3f0e3175"
      },
      "source": [
        "## We can conclude from the above two bar charts that \n",
        "# Ms Dhoni, AB de Villiers, RG Sharma, and V Kohli are the most successful IPL players (2008 - 2019)\n",
        "<hr style=\"border:2px solid gray\">"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1adf44c1",
      "metadata": {
        "id": "1adf44c1"
      },
      "source": [
        "## The \"Toss Decision\" is the most important factor that contributes to a team's victory or loss."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8b795176",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 499
        },
        "id": "8b795176",
        "outputId": "3ff3297a-2ff6-487f-f80e-c136ada23ac1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f299420b610>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(10,8))\n",
        "toss = [match_ds['toss_decision'].value_counts().bat,match_ds['toss_decision'].value_counts().field]# counting toss winner's decision\n",
        "plt.pie(toss,labels=['bat','field'],colors=['red','green'])\n",
        "plt.title('Decision Taken by Toss Winner')\n",
        "plt.legend()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d86817c4",
      "metadata": {
        "id": "d86817c4"
      },
      "source": [
        "### We can deduce from the pie chart that the most of the times, teams prefers to Field rather than Bat."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c76490ae",
      "metadata": {
        "id": "c76490ae"
      },
      "source": [
        "#### Creating a new Dataframe with toss winner and toss decision columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d426db9d",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 869
        },
        "id": "d426db9d",
        "outputId": "e67d951f-099e-464e-9220-398037d07a03"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        id  season           city        date                        team1  \\\n",
              "1        2    2017           Pune  2017-04-06               Mumbai Indians   \n",
              "2        3    2017         Rajkot  2017-04-07                Gujarat Lions   \n",
              "3        4    2017         Indore  2017-04-08       Rising Pune Supergiant   \n",
              "4        5    2017      Bangalore  2017-04-08  Royal Challengers Bangalore   \n",
              "5        6    2017      Hyderabad  2017-04-09                Gujarat Lions   \n",
              "..     ...     ...            ...         ...                          ...   \n",
              "750  11346    2019         Mohali    05/05/19          Chennai Super Kings   \n",
              "751  11347    2019         Mumbai    05/05/19        Kolkata Knight Riders   \n",
              "753  11413    2019  Visakhapatnam    08/05/19          Sunrisers Hyderabad   \n",
              "754  11414    2019  Visakhapatnam    10/05/19               Delhi Capitals   \n",
              "755  11415    2019      Hyderabad    12/05/19               Mumbai Indians   \n",
              "\n",
              "                      team2                  toss_winner toss_decision  \\\n",
              "1    Rising Pune Supergiant       Rising Pune Supergiant         field   \n",
              "2     Kolkata Knight Riders        Kolkata Knight Riders         field   \n",
              "3           Kings XI Punjab              Kings XI Punjab         field   \n",
              "4            Delhi Capitals  Royal Challengers Bangalore           bat   \n",
              "5       Sunrisers Hyderabad          Sunrisers Hyderabad         field   \n",
              "..                      ...                          ...           ...   \n",
              "750         Kings XI Punjab              Kings XI Punjab         field   \n",
              "751          Mumbai Indians               Mumbai Indians         field   \n",
              "753          Delhi Capitals               Delhi Capitals         field   \n",
              "754     Chennai Super Kings          Chennai Super Kings         field   \n",
              "755     Chennai Super Kings               Mumbai Indians           bat   \n",
              "\n",
              "     result  dl_applied                       winner  win_by_runs  \\\n",
              "1    normal           0       Rising Pune Supergiant            0   \n",
              "2    normal           0        Kolkata Knight Riders            0   \n",
              "3    normal           0              Kings XI Punjab            0   \n",
              "4    normal           0  Royal Challengers Bangalore           15   \n",
              "5    normal           0          Sunrisers Hyderabad            0   \n",
              "..      ...         ...                          ...          ...   \n",
              "750  normal           0              Kings XI Punjab            0   \n",
              "751  normal           0               Mumbai Indians            0   \n",
              "753  normal           0               Delhi Capitals            0   \n",
              "754  normal           0          Chennai Super Kings            0   \n",
              "755  normal           0               Mumbai Indians            1   \n",
              "\n",
              "     win_by_wickets player_of_match  \\\n",
              "1                 7       SPD Smith   \n",
              "2                10         CA Lynn   \n",
              "3                 6      GJ Maxwell   \n",
              "4                 0       KM Jadhav   \n",
              "5                 9     Rashid Khan   \n",
              "..              ...             ...   \n",
              "750               6        KL Rahul   \n",
              "751               9       HH Pandya   \n",
              "753               2         RR Pant   \n",
              "754               6    F du Plessis   \n",
              "755               0       JJ Bumrah   \n",
              "\n",
              "                                         venue                umpire1  \\\n",
              "1      Maharashtra Cricket Association Stadium         A Nand Kishore   \n",
              "2       Saurashtra Cricket Association Stadium            Nitin Menon   \n",
              "3                       Holkar Cricket Stadium           AK Chaudhary   \n",
              "4                        M Chinnaswamy Stadium                    NaN   \n",
              "5    Rajiv Gandhi International Stadium, Uppal             A Deshmukh   \n",
              "..                                         ...                    ...   \n",
              "750                          IS Bindra Stadium  KN Ananthapadmanabhan   \n",
              "751                           Wankhede Stadium          Nanda Kishore   \n",
              "753                           ACA-VDCA Stadium                    NaN   \n",
              "754                           ACA-VDCA Stadium          Sundaram Ravi   \n",
              "755         Rajiv Gandhi Intl. Cricket Stadium            Nitin Menon   \n",
              "\n",
              "            umpire2                  umpire3  \n",
              "1            S Ravi                      NaN  \n",
              "2         CK Nandan                      NaN  \n",
              "3     C Shamshuddin                      NaN  \n",
              "4               NaN                      NaN  \n",
              "5          NJ Llong                      NaN  \n",
              "..              ...                      ...  \n",
              "750   C Shamshuddin           Bruce Oxenford  \n",
              "751        O Nandan                   S Ravi  \n",
              "753             NaN                      NaN  \n",
              "754  Bruce Oxenford  Chettithody Shamshuddin  \n",
              "755       Ian Gould              Nigel Llong  \n",
              "\n",
              "[388 rows x 18 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1af35794-d521-4101-b7e2-b93377df92ca\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>season</th>\n",
              "      <th>city</th>\n",
              "      <th>date</th>\n",
              "      <th>team1</th>\n",
              "      <th>team2</th>\n",
              "      <th>toss_winner</th>\n",
              "      <th>toss_decision</th>\n",
              "      <th>result</th>\n",
              "      <th>dl_applied</th>\n",
              "      <th>winner</th>\n",
              "      <th>win_by_runs</th>\n",
              "      <th>win_by_wickets</th>\n",
              "      <th>player_of_match</th>\n",
              "      <th>venue</th>\n",
              "      <th>umpire1</th>\n",
              "      <th>umpire2</th>\n",
              "      <th>umpire3</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>2017</td>\n",
              "      <td>Pune</td>\n",
              "      <td>2017-04-06</td>\n",
              "      <td>Mumbai Indians</td>\n",
              "      <td>Rising Pune Supergiant</td>\n",
              "      <td>Rising Pune Supergiant</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Rising Pune Supergiant</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>SPD Smith</td>\n",
              "      <td>Maharashtra Cricket Association Stadium</td>\n",
              "      <td>A Nand Kishore</td>\n",
              "      <td>S Ravi</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>2017</td>\n",
              "      <td>Rajkot</td>\n",
              "      <td>2017-04-07</td>\n",
              "      <td>Gujarat Lions</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>CA Lynn</td>\n",
              "      <td>Saurashtra Cricket Association Stadium</td>\n",
              "      <td>Nitin Menon</td>\n",
              "      <td>CK Nandan</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>2017</td>\n",
              "      <td>Indore</td>\n",
              "      <td>2017-04-08</td>\n",
              "      <td>Rising Pune Supergiant</td>\n",
              "      <td>Kings XI Punjab</td>\n",
              "      <td>Kings XI Punjab</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Kings XI Punjab</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>GJ Maxwell</td>\n",
              "      <td>Holkar Cricket Stadium</td>\n",
              "      <td>AK Chaudhary</td>\n",
              "      <td>C Shamshuddin</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>2017</td>\n",
              "      <td>Bangalore</td>\n",
              "      <td>2017-04-08</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Delhi Capitals</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>bat</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "      <td>KM Jadhav</td>\n",
              "      <td>M Chinnaswamy Stadium</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>2017</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>2017-04-09</td>\n",
              "      <td>Gujarat Lions</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>Rashid Khan</td>\n",
              "      <td>Rajiv Gandhi International Stadium, Uppal</td>\n",
              "      <td>A Deshmukh</td>\n",
              "      <td>NJ Llong</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>750</th>\n",
              "      <td>11346</td>\n",
              "      <td>2019</td>\n",
              "      <td>Mohali</td>\n",
              "      <td>05/05/19</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>Kings XI Punjab</td>\n",
              "      <td>Kings XI Punjab</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Kings XI Punjab</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>KL Rahul</td>\n",
              "      <td>IS Bindra Stadium</td>\n",
              "      <td>KN Ananthapadmanabhan</td>\n",
              "      <td>C Shamshuddin</td>\n",
              "      <td>Bruce Oxenford</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>751</th>\n",
              "      <td>11347</td>\n",
              "      <td>2019</td>\n",
              "      <td>Mumbai</td>\n",
              "      <td>05/05/19</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>Mumbai Indians</td>\n",
              "      <td>Mumbai Indians</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Mumbai Indians</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>HH Pandya</td>\n",
              "      <td>Wankhede Stadium</td>\n",
              "      <td>Nanda Kishore</td>\n",
              "      <td>O Nandan</td>\n",
              "      <td>S Ravi</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>753</th>\n",
              "      <td>11413</td>\n",
              "      <td>2019</td>\n",
              "      <td>Visakhapatnam</td>\n",
              "      <td>08/05/19</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>Delhi Capitals</td>\n",
              "      <td>Delhi Capitals</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Delhi Capitals</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>RR Pant</td>\n",
              "      <td>ACA-VDCA Stadium</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>754</th>\n",
              "      <td>11414</td>\n",
              "      <td>2019</td>\n",
              "      <td>Visakhapatnam</td>\n",
              "      <td>10/05/19</td>\n",
              "      <td>Delhi Capitals</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>F du Plessis</td>\n",
              "      <td>ACA-VDCA Stadium</td>\n",
              "      <td>Sundaram Ravi</td>\n",
              "      <td>Bruce Oxenford</td>\n",
              "      <td>Chettithody Shamshuddin</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>755</th>\n",
              "      <td>11415</td>\n",
              "      <td>2019</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>12/05/19</td>\n",
              "      <td>Mumbai Indians</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>Mumbai Indians</td>\n",
              "      <td>bat</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Mumbai Indians</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>JJ Bumrah</td>\n",
              "      <td>Rajiv Gandhi Intl. Cricket Stadium</td>\n",
              "      <td>Nitin Menon</td>\n",
              "      <td>Ian Gould</td>\n",
              "      <td>Nigel Llong</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>388 rows Ã— 18 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1af35794-d521-4101-b7e2-b93377df92ca')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1af35794-d521-4101-b7e2-b93377df92ca button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1af35794-d521-4101-b7e2-b93377df92ca');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "toss_match_winner_df = match_ds[match_ds['toss_winner']==match_ds['winner']] # generating dataframe where the toss winner and match winner are same\n",
        "toss_match_winner_df = toss_match_winner_df[toss_match_winner_df.result != 'tie'] # make sure the match result does not tie\n",
        "toss_match_winner_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "bcd6267c",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 457
        },
        "id": "bcd6267c",
        "outputId": "22b69f9a-da43-4434-9a29-afb10dc33756"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                          team1  No.of times the team won both toss and match\n",
              "0           Chennai Super Kings                                            89\n",
              "1               Deccan Chargers                                            43\n",
              "2                Delhi Capitals                                            78\n",
              "3                 Gujarat Lions                                            14\n",
              "4               Kings XI Punjab                                            91\n",
              "5          Kochi Tuskers Kerala                                             7\n",
              "6         Kolkata Knight Riders                                            83\n",
              "7                Mumbai Indians                                           101\n",
              "8                 Pune Warriors                                            20\n",
              "9              Rajasthan Royals                                            67\n",
              "10       Rising Pune Supergiant                                            15\n",
              "11  Royal Challengers Bangalore                                            85\n",
              "12          Sunrisers Hyderabad                                            63"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2486eb01-ef07-4b1d-8e40-113335ccd4da\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>team1</th>\n",
              "      <th>No.of times the team won both toss and match</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Deccan Chargers</td>\n",
              "      <td>43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Delhi Capitals</td>\n",
              "      <td>78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Gujarat Lions</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Kings XI Punjab</td>\n",
              "      <td>91</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Kochi Tuskers Kerala</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Mumbai Indians</td>\n",
              "      <td>101</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Pune Warriors</td>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>67</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Rising Pune Supergiant</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>63</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2486eb01-ef07-4b1d-8e40-113335ccd4da')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2486eb01-ef07-4b1d-8e40-113335ccd4da button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2486eb01-ef07-4b1d-8e40-113335ccd4da');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "team_winning_toss_df = match_ds.groupby(['team1']).apply(lambda x:x['toss_decision'].count()).reset_index(name = 'No.of times the team won both toss and match')\n",
        "team_winning_toss_df # grouping team1 from team_winning_toss_df by toss decision"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2e3dc9b3",
      "metadata": {
        "id": "2e3dc9b3"
      },
      "source": [
        "### We can deduce from the preceding table that Mumbai Indians made the better toss decision."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "40f4ecbf",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 899
        },
        "id": "40f4ecbf",
        "outputId": "5b8d870b-63a2-4068-d854-0a81325d959d"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x1080 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "team_winning_toss_df = match_ds.groupby(['team1','toss_decision']).apply(lambda x:x['toss_decision'].count()).reset_index(name = 'toss decision counts')\n",
        "# slightly modifying it by grouping under toss decision\n",
        "heatmap_for_data = pd.pivot_table(team_winning_toss_df, values = 'toss decision counts',\n",
        "                                 index = ['team1'],\n",
        "                                 columns = 'toss_decision')\n",
        "# generating heatmap\n",
        "fig_plt,axis = plt.subplots(1,1,figsize = (5,15))\n",
        "heat_map_lead = sns.heatmap(heatmap_for_data,annot =True) \n",
        "heat_map_lead.xaxis.set_ticks_position(\"top\") # position for ticks\n",
        "axis.set_title(\"Decisions taken by toss winners\",size = 20);"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2bcb4422",
      "metadata": {
        "id": "2bcb4422"
      },
      "source": [
        "### We can deduce what each team's strength is based on this heatmap, whether it was Batting or Fielding.\n",
        "<hr style=\"border:2px solid gray\">"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9f723934",
      "metadata": {
        "id": "9f723934"
      },
      "source": [
        "### The 'Location of the Match' is another important factor that contributes to a team's victory or loss."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e015e38f",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "e015e38f",
        "outputId": "c664d27b-ebcb-4b92-bc8e-9092f8ca77de"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Location</th>\n",
              "      <th>No. of matches held in the city</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Mumbai</td>\n",
              "      <td>101</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Kolkata</td>\n",
              "      <td>77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Delhi</td>\n",
              "      <td>73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Bangalore</td>\n",
              "      <td>64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Chennai</td>\n",
              "      <td>57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Jaipur</td>\n",
              "      <td>47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Chandigarh</td>\n",
              "      <td>46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Pune</td>\n",
              "      <td>38</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Durban</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Visakhapatnam</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Bengaluru</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Centurion</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Ahmedabad</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Mohali</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Rajkot</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Dharamsala</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Indore</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Johannesburg</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Ranchi</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>Port Elizabeth</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>Cape Town</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>Cuttack</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>Abu Dhabi</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>Raipur</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>Sharjah</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>Kochi</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>Kanpur</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>Nagpur</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>Kimberley</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>East London</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>Bloemfontein</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "          Location  No. of matches held in the city\n",
              "0           Mumbai                              101\n",
              "1          Kolkata                               77\n",
              "2            Delhi                               73\n",
              "3        Bangalore                               64\n",
              "4        Hyderabad                               64\n",
              "5          Chennai                               57\n",
              "6           Jaipur                               47\n",
              "7       Chandigarh                               46\n",
              "8             Pune                               38\n",
              "9           Durban                               15\n",
              "10   Visakhapatnam                               13\n",
              "11       Bengaluru                               13\n",
              "12       Centurion                               12\n",
              "13       Ahmedabad                               12\n",
              "14          Mohali                               10\n",
              "15          Rajkot                               10\n",
              "16      Dharamsala                                9\n",
              "17          Indore                                9\n",
              "18    Johannesburg                                8\n",
              "19          Ranchi                                7\n",
              "20  Port Elizabeth                                7\n",
              "21       Cape Town                                7\n",
              "22         Cuttack                                7\n",
              "23       Abu Dhabi                                7\n",
              "24          Raipur                                6\n",
              "25         Sharjah                                6\n",
              "26           Kochi                                5\n",
              "27          Kanpur                                4\n",
              "28          Nagpur                                3\n",
              "29       Kimberley                                3\n",
              "30     East London                                3\n",
              "31    Bloemfontein                                2"
            ]
          },
          "execution_count": 27,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "Location = match_ds.groupby('city')[['winner']].count() #grouping no. of winner in every city  \n",
        "Location=Location.sort_values(by='winner',ascending=False).reset_index()\n",
        "Location.rename(columns={'city':'Location','winner':'No. of matches held in the city'},inplace=True)\n",
        "Location"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "07de7438",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 636
        },
        "id": "07de7438",
        "outputId": "236ed142-d43e-4264-d3be-708aca370575"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fc0186ac150>"
            ]
          },
          "execution_count": 36,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x648 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure(figsize=(15,9))\n",
        "plt.xticks(fontsize=10,rotation=45)\n",
        "plt.title(\"The number of matches played in the city\")\n",
        "sns.barplot(y = Location['No. of matches held in the city'],x=Location.Location)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "4eef1d76",
      "metadata": {
        "id": "4eef1d76"
      },
      "source": [
        "## This bar graph indicates that the most important cities for IPL matches are MUMBAI, KOLKATA, DELHI, BANGALORE, HYDERABAD, and CHENNAI.Every team must prepare for a game in this major city and at a significant stadium.\n",
        "<hr style=\"border:2px solid gray\">"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "6ca734ea",
      "metadata": {
        "id": "6ca734ea"
      },
      "source": [
        "## RESULT:\n",
        "   > ## CHENNAI SUPER KINGS and MUMBAI INDIANS are the most successful teams in IPL history.\n",
        "   > ## MS Dhoni, AB de Villiers, RG Sharma, and V Kohli are the most successful players in IPL history.\n",
        "   > ## The Toss decision and City in which the game was played are two major factors that contibute to a team's victory and defect.\n",
        "   > ## I would recommend that a company to choose \"MS DHONI,\" \"V KOHLI,\" and \"RG Sharma\" to support its products because of their large fan bases ."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3pHbq7XcSHZZ",
      "metadata": {
        "id": "3pHbq7XcSHZZ"
      },
      "source": [
        "## **Thank You**"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "GRIP task-1 Sports EDA.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
   "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.8"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
} 

 
 
